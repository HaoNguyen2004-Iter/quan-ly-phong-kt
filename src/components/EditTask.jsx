import React, { useEffect, useMemo, useState } from 'react';
import { Save, X } from 'lucide-react';
import { useEmployeesStore } from '../store/employeesStore'; // ‚úÖ l·∫•y danh s√°ch nh√¢n vi√™n ƒë·ªÉ l·ªçc theo ph√≤ng ban

const emptyTask = {
  id: null,
  name: '',
  description: '',
  assignee: '',          // t√™n hi·ªÉn th·ªã (gi·ªØ nguy√™n theo code c·ªßa b·∫°n)
  assigneeId: null,      // id nh√¢n vi√™n (m·ªõi th√™m ‚Äì t√πy BE d√πng)
  department: '',        // ph√≤ng ban c·ªßa ng∆∞·ªùi th·ª±c hi·ªán (m·ªõi th√™m ‚Äì ƒë·ªÉ l·ªçc)
  priority: 'Trung b√¨nh', // Th·∫•p | Trung b√¨nh | Cao
  status: 'M·ªõi',         // M·ªõi | ƒêang th·ª±c hi·ªán | Ho√†n th√†nh | T·∫°m d·ª´ng | Qu√° h·∫°n
  startDate: '',
  dueDate: '',
  tags: [],
};

export default function EditTask({ task = null, onSave, onCancel }) {
  // ===== Nh√¢n vi√™n & ph√≤ng ban =====
  const employees = useEmployeesStore(s => s.items);
  const fetchEmployees = useEmployeesStore(s => s.fetchAll);

  // c·ªë g·∫Øng n·∫°p danh s√°ch nh√¢n vi√™n (admin m·ªõi l·∫•y full ƒë∆∞·ª£c; staff c√≥ th·ªÉ 403 -> c·ª© ignore)
  useEffect(() => {
    if (!employees?.length) {
      fetchEmployees().catch(() => {});
    }
  }, [employees?.length, fetchEmployees]);

  // T·∫≠p ph√≤ng ban (unique), ∆∞u ti√™n c√≥ d·ªØ li·ªáu
  const departments = useMemo(() => {
    const set = new Set(
      (employees || [])
        .map(e => e?.department)
        .filter(Boolean)
    );
    return ['', ...Array.from(set)]; // '' = placeholder
  }, [employees]);

  const [form, setForm] = useState(emptyTask);
  const [tagInput, setTagInput] = useState('');

  // Khi c√≥ task ho·∫∑c employees ƒë·ªïi, set l·∫°i form (ƒë·ªÉ t·ª± suy ra ph√≤ng ban t·ª´ assigneeId n·∫øu c√≥)
  useEffect(() => {
    const base = {
      ...emptyTask,
      ...(task || {}),
      tags: Array.isArray(task?.tags) ? task.tags : [],
    };

    // N·∫øu task c√≥ assigneeId -> t√¨m th√¥ng tin nh√¢n vi√™n ƒë·ªÉ auto-fill department + assignee name
    if (task?.assigneeId && employees?.length) {
      const emp = employees.find(e => e.id === task.assigneeId);
      if (emp) {
        base.department = emp.department || base.department || '';
        base.assignee = base.assignee || emp.name || emp.email || '';
      }
    }

    // N·∫øu ch∆∞a c√≥ department m√† tr∆∞·ªõc ƒë√≥ ƒë√£ c√≥ assignee (text) ‚Üí c·ªë g·∫Øng ƒëo√°n theo t√™n/email
    if (!base.department && base.assignee && employees?.length) {
      const emp = employees.find(e => (e.name === base.assignee) || (e.email === base.assignee));
      if (emp) base.department = emp.department || '';
    }

    setForm(base);
  }, [task, employees]);

  const update = (k, v) => setForm(prev => ({ ...prev, [k]: v }));

  const addTag = () => {
    const v = tagInput.trim();
    if (!v) return;
    if (!form.tags.includes(v)) update('tags', [...form.tags, v]);
    setTagInput('');
  };
  const removeTag = (t) => update('tags', form.tags.filter(x => x !== t));

  // ===== L·ªçc nh√¢n vi√™n theo ph√≤ng ban, lo·∫°i admin =====
  const employeeOptions = useMemo(() => {
    const dept = form.department || '';
    return (employees || [])
      .filter(e => String(e.role || '').toLowerCase() !== 'admin')
      .filter(e => !dept || e.department === dept)
      .map(e => ({
        value: e.id,
        label: e.name || e.email || `#${e.id}`,
        email: e.email,
        department: e.department,
      }));
  }, [employees, form.department]);

  // Khi ƒë·ªïi ph√≤ng ban ‚Üí reset ng∆∞·ªùi th·ª±c hi·ªán
  const onChangeDepartment = (v) => {
    setForm(prev => ({
      ...prev,
      department: v,
      assigneeId: null,
      assignee: '',
    }));
  };

  // Khi ch·ªçn ng∆∞·ªùi th·ª±c hi·ªán ‚Üí set c·∫£ assigneeId & assignee (text hi·ªÉn th·ªã)
  const onChangeAssignee = (idStr) => {
    const id = idStr ? Number(idStr) : null;
    const emp = employeeOptions.find(o => o.value === id);
    setForm(prev => ({
      ...prev,
      assigneeId: id,
      assignee: emp ? emp.label : '',
      department: emp?.department || prev.department || '',
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!form.name.trim()) {
      alert('T√™n c√¥ng vi·ªác l√† b·∫Øt bu·ªôc');
      return;
    }

    // Chu·∫©n ho√° ng√†y v·ªÅ YYYY-MM-DD
    const toYMD = (v) => {
      if (!v) return '';
      if (/^\d{4}-\d{2}-\d{2}$/.test(v)) return v;
      const d = new Date(v);
      return isNaN(d) ? '' : d.toISOString().slice(0, 10);
    };

    const payload = {
      ...form,
      startDate: toYMD(form.startDate) || '',
      dueDate: toYMD(form.dueDate) || '',
      // gi·ªØ nguy√™n c√°c field kh√°c; BE c√≥ th·ªÉ d√πng assigneeId, FE v·∫´n c√≥ assignee (text) ƒë·ªÉ hi·ªÉn th·ªã
    };

    if (onSave) onSave(payload);
  };

  return (
    <div className="p-6 bg-white rounded-xl shadow-sm border border-gray-200">
      <div className="p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold text-gray-900">
            {form.id ? 'Ch·ªânh s·ª≠a c√¥ng vi·ªác' : 'Th√™m c√¥ng vi·ªác'}
          </h2>
          <button onClick={onCancel} className="inline-flex items-center gap-1 px-3 py-1 rounded-lg border hover:bg-gray-50">
            <X className="w-4 h-4" /> ƒê√≥ng
          </button>
        </div>

        <form onSubmit={handleSubmit} className="grid grid-cols-1 lg:grid-cols-2 gap-4">
          <div className="lg:col-span-2">
            <label className="block text-sm font-medium text-gray-700 mb-1">T√™n c√¥ng vi·ªác *</label>
            <input
              value={form.name}
              onChange={(e) => update('name', e.target.value)}
              className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="VD: L·∫≠p b√°o c√°o t√†i ch√≠nh Q4"
            />
          </div>

          <div className="lg:col-span-2">
            <label className="block text-sm font-medium text-gray-700 mb-1">M√¥ t·∫£</label>
            <textarea
              value={form.description}
              onChange={(e) => update('description', e.target.value)}
              rows={4}
              className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="M√¥ t·∫£ chi ti·∫øt c√¥ng vi·ªác..."
            />
          </div>

          {/* üîΩ Ph√≤ng ban (l·ªçc ng∆∞·ªùi th·ª±c hi·ªán) */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Ph√≤ng ban</label>
            <select
              value={form.department}
              onChange={(e) => onChangeDepartment(e.target.value)}
              className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">‚Äî Ch·ªçn ph√≤ng ban ‚Äî</option>
              {departments.filter(Boolean).map(d => (
                <option key={d} value={d}>{d}</option>
              ))}
            </select>
          </div>

          {/* üîΩ Ng∆∞·ªùi th·ª±c hi·ªán (ch·ªâ nh√¢n vi√™n trong ph√≤ng ban) */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Ng∆∞·ªùi th·ª±c hi·ªán</label>
            <select
              value={form.assigneeId ?? ''}
              onChange={(e) => onChangeAssignee(e.target.value)}
              className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              disabled={!form.department}
            >
              {!form.department && <option value="">‚Äî Ch·ªçn ph√≤ng ban tr∆∞·ªõc ‚Äî</option>}
              {form.department && <option value="">‚Äî Ch·ªçn ng∆∞·ªùi th·ª±c hi·ªán ‚Äî</option>}
              {form.department && employeeOptions.map(o => (
                <option key={o.value} value={o.value}>{o.label}</option>
              ))}
            </select>
            {/* gi·ªØ text assignee ƒë·ªÉ t∆∞∆°ng th√≠ch n∆°i kh√°c (n·∫øu c·∫ßn) */}
            {form.assignee && (
              <div className="text-xs text-gray-500 mt-1">ƒê√£ ch·ªçn: {form.assignee}</div>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">∆Øu ti√™n</label>
            <select
              value={form.priority}
              onChange={(e) => update('priority', e.target.value)}
              className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option>Th·∫•p</option>
              <option>Trung b√¨nh</option>
              <option>Cao</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Tr·∫°ng th√°i</label>
            <select
              value={form.status}
              onChange={(e) => update('status', e.target.value)}
              className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option>M·ªõi</option>
              <option>ƒêang th·ª±c hi·ªán</option>
              <option>Ho√†n th√†nh</option>
              <option>T·∫°m d·ª´ng</option>
              <option>Qu√° h·∫°n</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Ng√†y b·∫Øt ƒë·∫ßu</label>
            <input
              type="date"
              value={form.startDate || ''}
              onChange={(e) => update('startDate', e.target.value)}
              className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">H·∫°n ch√≥t</label>
            <input
              type="date"
              value={form.dueDate || ''}
              onChange={(e) => update('dueDate', e.target.value)}
              className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div className="lg:col-span-2">
            <label className="block text-sm font-medium text-gray-700 mb-1">Th·∫ª (tags)</label>
            <div className="flex gap-2">
              <input
                value={tagInput}
                onChange={(e) => setTagInput(e.target.value)}
                className="flex-1 px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Nh·∫≠p th·∫ª v√† Enter"
                onKeyDown={(e) => e.key === 'Enter' ? (e.preventDefault(), addTag()) : null}
              />
              <button type="button" onClick={addTag} className="px-3 py-2 border rounded-lg hover:bg-gray-50">Th√™m</button>
            </div>
            <div className="mt-2 flex flex-wrap gap-2">
              {form.tags.map(t => (
                <span key={t} className="inline-flex items-center gap-1 px-2 py-1 text-xs bg-gray-100 border rounded-full">
                  {t}
                  <button type="button" onClick={() => removeTag(t)} className="text-gray-500 hover:text-gray-800">√ó</button>
                </span>
              ))}
            </div>
          </div>

          <div className="lg:col-span-2 flex justify-end gap-2 mt-2">
            <button type="button" onClick={onCancel} className="px-4 py-2 border rounded-lg hover:bg-gray-50">Hu·ª∑</button>
            <button type="submit" className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 inline-flex items-center gap-2">
              <Save className="w-4 h-4" /> L∆∞u
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
